
import numpy as np
from numpy import *
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.colors import LightSource, Normalize
import math


###### Flow definition #########################################################

maxIter = 200000                # Total number of time iterations.
Re = 350.0                      # Reynolds number.
nx, ny = 1100, 180              # Numer of lattice nodes.
b1x, b2x, b3x = 400, 550, 600   # Positions of obstacles
ly = ny-1                       # Height of the domain in lattice units.
cx, cy, r = b1x, ny//2, ny//4   # Coordinates of the cylinder.
uLB     = 0.04                  # Velocity in lattice units.
nulb    = uLB*(b3x-b2x)/Re;     # Viscoscity in lattice units.
omega = 1 / (3*nulb+0.5);       # Relaxation parameter.
B = 0.0;                       # Magnetic Field
sig = 1                         # Conductivity

###### Lattice Constants #######################################################
v = array([ [ 1,  1], [ 1,  0], [ 1, -1], [ 0,  1], [ 0,  0],
            [ 0, -1], [-1,  1], [-1,  0], [-1, -1] ])
t = array([ 1/36, 1/9, 1/36, 1/9, 4/9, 1/9, 1/36, 1/9, 1/36])

col1 = array([0, 1, 2])
col2 = array([3, 4, 5])
col3 = array([6, 7, 8])

###### Function Definitions ####################################################
def macroscopic(fin):
    rho = sum(fin, axis=0)
    u = zeros((2, nx, ny))
    for i in range(9):
        u[0,:,:] += v[i,0] * fin[i,:,:]
        u[1,:,:] += v[i,1] * fin[i,:,:]
    u /= rho
    return rho, u

def equilibrium(rho, u):              # Equilibrium distribution function.
    usqr = 3/2 * (u[0]**2 + u[1]**2)
    feq = zeros((9,nx,ny))
    for i in range(9):
        cu = 3 * (v[i,0]*u[0,:,:] + v[i,1]*u[1,:,:])
        feq[i,:,:] = rho*t[i] * (1 + cu + 0.5*cu**2 - usqr)
    return feq

###### Setup: cylindrical obstacle and velocity inlet with perturbation ########
# Creation of a mask with 1/0 values, defining the shape of the obstacle.
def obstacle_fun1(x, y):
    return np.logical_and(np.logical_and(np.logical_and(x>=cx-sqrt(r**2-(y-cy)**2),x<=cx), y>ny/4),np.logical_and(np.logical_and(x>=cx-sqrt(r**2-(y-cy)**2),x<=cx), y<3*ny/4))

obstacle1 = fromfunction(obstacle_fun1, (nx,ny))

def obstacle_fun2(x, y):
    return y>=ny

obstacle2 = fromfunction(obstacle_fun2, (nx,ny))

def obstacle_fun3(x, y):
    return y<=0

obstacle3 = fromfunction(obstacle_fun3, (nx,ny))

def obstacle_fun4(x, y):
    return np.logical_and(np.logical_and(np.logical_and(y<=3*ny/4,y>=ny/4), x>=b1x),np.logical_and(np.logical_and(y<=3*ny/4,y>=ny/4), x<=b2x))

obstacle4 = fromfunction(obstacle_fun4, (nx,ny))

def obstacle_fun5(x, y):
    return np.logical_and(np.logical_and(x==b3x, y>=0), np.logical_and(x==b3x, y<=ny/4))

obstacle5 = fromfunction(obstacle_fun5, (nx,ny))

def obstacle_fun6(x, y):
    return np.logical_and(np.logical_and(x==b3x, y>=3*ny/4), np.logical_and(x==b3x, y<=ny))

obstacle6 = fromfunction(obstacle_fun6, (nx,ny))


def obstacle_fun7(x, y):
    return np.logical_and(y==ny/4, x>=b3x)

obstacle7 = fromfunction(obstacle_fun7, (nx,ny))

def obstacle_fun8(x, y):
    return np.logical_and(y==3*ny/4, x>=b3x)

obstacle8 = fromfunction(obstacle_fun8, (nx,ny))


# Initial velocity profile: almost zero, with a slight perturbation to trigger
# the instability.
def inivel(d, x, y):
    return (1-d) * uLB * (1 + 1e-4*sin(y/ly*2*pi))

vel = fromfunction(inivel, (2,nx,ny))

# Initialization of the populations at equilibrium with the given velocity.
fin = equilibrium(1, vel)

###### Main time loop ##########################################################
for time in range(maxIter):
    # Right wall: outflow condition.
    fin[col3,-1,:] = fin[col3,-2,:] 

    # Compute macroscopic variables, density and velocity.
    rho, u = macroscopic(fin)

    # Left wall: inflow condition.
    u[:,0,:] = vel[:,0,:]
    rho[0,:] = 1/(1-u[0,0,:]) * ( sum(fin[col2,0,:], axis=0) +
                                  2*sum(fin[col3,0,:], axis=0) )
    # Compute equilibrium.
    feq = equilibrium(rho, u-(B**2)*u/(rho*omega))
    fin[[0,1,2],0,:] = feq[[0,1,2],0,:] + fin[[8,7,6],0,:] - feq[[8,7,6],0,:]

    # Collision step.
    fout = fin - omega * (fin - feq)

    # Bounce-back condition for obstacle.
    for i in range(9):
        fout[i, obstacle1] = fin[8-i, obstacle1]
        fout[i, obstacle2] = fin[8-i, obstacle2]
        fout[i, obstacle3] = fin[8-i, obstacle3]
        fout[i, obstacle4] = fin[8-i, obstacle4]
        fout[i, obstacle5] = fin[8-i, obstacle5]
        fout[i, obstacle6] = fin[8-i, obstacle6]
        fout[i, obstacle7] = fin[8-i, obstacle7]
        fout[i, obstacle8] = fin[8-i, obstacle8]


    # Streaming step.
    for i in range(9):
        fin[i,:,:] = roll(
                            roll(fout[i,:,:], v[i,0], axis=0),
                            v[i,1], axis=1 )
 
    # Visualization of the velocity.

    
    
    if (time%100==0):
        print(time/100)
        plt.clf()
        for j in range(110):
            plt.clf();plt.imshow(sqrt(u[0]**2+u[1]**2).transpose(), cmap=cm.rainbow)
            plt.savefig("vel.{0:04d}.png".format(time//100))
        
        #Saving the files in binary
        
    if (np.logical_and(time%10==0,time/10>=10000)):
        s=str(time/10-10000)
        f = open("Vfx"+s+".dat", "wb")
        f.write(bytearray(u[0]))
        g = open("Vfy"+s+".dat", "wb")
        g.write(bytearray(u[1]))
